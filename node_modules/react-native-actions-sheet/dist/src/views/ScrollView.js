/* eslint-disable curly */
import React, { useEffect, useImperativeHandle, useState, } from 'react';
import { Platform, ScrollView as RNScrollView, } from 'react-native';
import { ScrollView as RNGHScrollView, } from 'react-native-gesture-handler';
import { useScrollHandlers } from '../hooks/use-scroll-handlers';
function $ScrollView(props, ref) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    var _a = useState(false), _render = _a[0], setRender = _a[1];
    var handlers = useScrollHandlers({
        hasRefreshControl: !!props.refreshControl,
        refreshControlBoundary: props.refreshControlGestureArea || 0.15
    });
    useImperativeHandle(ref, function () { return handlers.ref; });
    useEffect(function () {
        if (Platform.OS === 'web' || !handlers.simultaneousHandlers)
            return;
        var interval = setInterval(function () {
            if (handlers.simultaneousHandlers.current) {
                clearInterval(interval);
                setRender(true);
            }
        }, 10);
    }, [handlers.simultaneousHandlers]);
    var ScrollComponent = Platform.OS === 'web' ? RNScrollView : RNGHScrollView;
    return (<ScrollComponent {...props} {...handlers} onScroll={function (event) {
            var _a;
            handlers.onScroll(event);
            (_a = props.onScroll) === null || _a === void 0 ? void 0 : _a.call(props, event);
        }} onLayout={function (event) {
            var _a;
            handlers.onLayout();
            (_a = props.onLayout) === null || _a === void 0 ? void 0 : _a.call(props, event);
        }} onContentSizeChange={function (w, h) {
            var _a;
            handlers.onContentSizeChange(w, h);
            (_a = props.onContentSizeChange) === null || _a === void 0 ? void 0 : _a.call(props, w, h);
        }}/>);
}
export var ScrollView = React.forwardRef($ScrollView);
