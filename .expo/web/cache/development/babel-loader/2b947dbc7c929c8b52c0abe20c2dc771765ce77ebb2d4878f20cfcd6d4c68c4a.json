{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { validateNewTeam } from \"./ValidationLogic\";\nexport var saveTeam = function () {\n  var _ref = _asyncToGenerator(function* (teamNumber) {\n    try {\n      var teams = yield loadTeams();\n      if (yield validateNewTeam(teamNumber, teams)) {\n        console.warn(\"Team already exists. Aborting.\");\n        return;\n      }\n      var numericTeamNumber = +teamNumber;\n      var id = Date.now().toString();\n      var newTeam = {\n        id: id,\n        teamNumber: numericTeamNumber\n      };\n      teams.push(newTeam);\n      teams.sort(function (a, b) {\n        return a.teamNumber - b.teamNumber;\n      });\n      yield AsyncStorage.setItem(\"teams\", JSON.stringify(teams));\n    } catch (error) {\n      console.error(\"Error saving team:\", error);\n      throw error;\n    }\n  });\n  return function saveTeam(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loadTeams = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    try {\n      var teamsJSON = yield AsyncStorage.getItem(\"teams\");\n      var teams = teamsJSON ? JSON.parse(teamsJSON) : [];\n      teams.sort(function (a, b) {\n        return a.teamNumber - b.teamNumber;\n      });\n      return teams;\n    } catch (error) {\n      console.error(\"Error loading teams:\", error);\n      return [];\n    }\n  });\n  return function loadTeams() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport function removeTeam(_x2) {\n  return _removeTeam.apply(this, arguments);\n}\nfunction _removeTeam() {\n  _removeTeam = _asyncToGenerator(function* (name) {\n    try {\n      var teams = yield loadTeams();\n      var newTeams = teams.filter(function (team) {\n        return team.teamNumber !== name;\n      });\n      yield AsyncStorage.setItem(\"teams\", JSON.stringify(newTeams));\n    } catch (error) {\n      console.error(\"Error removing team:\", error);\n    }\n  });\n  return _removeTeam.apply(this, arguments);\n}\nexport var editTeam = function () {\n  var _ref3 = _asyncToGenerator(function* (teamNumberToEdit, newTeamNumber) {\n    try {\n      var teams = yield loadTeams();\n      var updatedTeams = teams.map(function (team) {\n        return team.teamNumber === teamNumberToEdit ? _objectSpread(_objectSpread({}, team), {}, {\n          teamNumber: newTeamNumber\n        }) : team;\n      });\n      yield AsyncStorage.setItem(\"teams\", JSON.stringify(updatedTeams));\n    } catch (error) {\n      console.error(\"Error editing team:\", error);\n    }\n  });\n  return function editTeam(_x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var loadTeamData = function () {\n  var _ref4 = _asyncToGenerator(function* (teamNumber) {\n    try {\n      var teams = yield loadTeams();\n      var team = teams.find(function (t) {\n        return t.teamNumber === teamNumber;\n      });\n      return team;\n    } catch (error) {\n      console.error(\"Error loading team:\", error);\n      throw error;\n    }\n  });\n  return function loadTeamData(_x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var saveMatchCount = function () {\n  var _ref5 = _asyncToGenerator(function* (TeamNumber) {\n    var teamsJson = yield AsyncStorage.getItem(\"teams\");\n    var teams = teamsJson ? JSON.parse(teamsJson) : [];\n    var targetTeamIndex = teams.findIndex(function (team) {\n      return team.teamNumber == TeamNumber || team.teamNumber.toString() == TeamNumber;\n    });\n    if (targetTeamIndex !== -1) {\n      if (\"matchNumber\" in teams[targetTeamIndex]) {\n        teams[targetTeamIndex].matchNumber += 1;\n      } else {\n        teams[targetTeamIndex].matchNumber = 1;\n      }\n      yield AsyncStorage.setItem(\"teams\", JSON.stringify(teams));\n    } else {\n      console.log(\"Team not found\");\n    }\n  });\n  return function saveMatchCount(_x6) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport function loadMatchCount(_x7) {\n  return _loadMatchCount.apply(this, arguments);\n}\nfunction _loadMatchCount() {\n  _loadMatchCount = _asyncToGenerator(function* (teamNumber) {\n    try {\n      var team = yield loadTeamData(teamNumber);\n      if (team.matchNumber == null) {\n        return 0;\n      }\n      return team.matchNumber;\n    } catch (error) {\n      console.error(\"Error retrieving data from AsyncStorage:\", error);\n      return null;\n    }\n  });\n  return _loadMatchCount.apply(this, arguments);\n}","map":{"version":3,"names":["AsyncStorage","validateNewTeam","saveTeam","_ref","_asyncToGenerator","teamNumber","teams","loadTeams","console","warn","numericTeamNumber","id","Date","now","toString","newTeam","push","sort","a","b","setItem","JSON","stringify","error","_x","apply","arguments","_ref2","teamsJSON","getItem","parse","removeTeam","_x2","_removeTeam","name","newTeams","filter","team","editTeam","_ref3","teamNumberToEdit","newTeamNumber","updatedTeams","map","_objectSpread","_x3","_x4","loadTeamData","_ref4","find","t","_x5","saveMatchCount","_ref5","TeamNumber","teamsJson","targetTeamIndex","findIndex","matchNumber","log","_x6","loadMatchCount","_x7","_loadMatchCount"],"sources":["C:/Users/Noril/Documents/TechScout/logic/TeamLogic.js"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { validateNewTeam } from \"./ValidationLogic\";\r\n\r\nexport const saveTeam = async (teamNumber) => {\r\n  try {\r\n    const teams = await loadTeams();\r\n\r\n    if (await validateNewTeam(teamNumber, teams)) {\r\n      console.warn(\"Team already exists. Aborting.\");\r\n      return;\r\n    }\r\n    const numericTeamNumber = +teamNumber;\r\n\r\n    const id = Date.now().toString();\r\n    const newTeam = { id, teamNumber: numericTeamNumber };\r\n\r\n    teams.push(newTeam);\r\n    teams.sort((a, b) => a.teamNumber - b.teamNumber);\r\n\r\n    await AsyncStorage.setItem(\"teams\", JSON.stringify(teams));\r\n  } catch (error) {\r\n    console.error(\"Error saving team:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const loadTeams = async () => {\r\n  try {\r\n    const teamsJSON = await AsyncStorage.getItem(\"teams\");\r\n    const teams = teamsJSON ? JSON.parse(teamsJSON) : [];\r\n    teams.sort((a, b) => a.teamNumber - b.teamNumber);\r\n    //console.log('Teams loaded'+ JSON.stringify(teams));\r\n    return teams;\r\n  } catch (error) {\r\n    console.error(\"Error loading teams:\", error);\r\n    return [];\r\n  }\r\n};\r\nexport async function removeTeam(name) {\r\n  try {\r\n    const teams = await loadTeams();\r\n    const newTeams = teams.filter((team) => team.teamNumber !== name);\r\n    await AsyncStorage.setItem(\"teams\", JSON.stringify(newTeams));\r\n  } catch (error) {\r\n    console.error(\"Error removing team:\", error);\r\n  }\r\n}\r\n\r\nexport const editTeam = async (teamNumberToEdit, newTeamNumber) => {\r\n  try {\r\n    const teams = await loadTeams();\r\n    const updatedTeams = teams.map((team) =>\r\n      team.teamNumber === teamNumberToEdit\r\n        ? { ...team, teamNumber: newTeamNumber }\r\n        : team\r\n    );\r\n\r\n    await AsyncStorage.setItem(\"teams\", JSON.stringify(updatedTeams));\r\n  } catch (error) {\r\n    console.error(\"Error editing team:\", error);\r\n  }\r\n};\r\n\r\nexport const loadTeamData = async (teamNumber) => {\r\n  try {\r\n    const teams = await loadTeams();\r\n    const team = teams.find((t) => t.teamNumber === teamNumber);\r\n    return team;\r\n  } catch (error) {\r\n    console.error(\"Error loading team:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const saveMatchCount = async (TeamNumber) => {\r\n  const teamsJson = await AsyncStorage.getItem(\"teams\");\r\n  const teams = teamsJson ? JSON.parse(teamsJson) : [];\r\n\r\n  const targetTeamIndex = teams.findIndex(\r\n    (team) =>\r\n      team.teamNumber == TeamNumber || team.teamNumber.toString() == TeamNumber\r\n  );\r\n\r\n  if (targetTeamIndex !== -1) {\r\n    if (\"matchNumber\" in teams[targetTeamIndex]) {\r\n      teams[targetTeamIndex].matchNumber += 1;\r\n    } else {\r\n      teams[targetTeamIndex].matchNumber = 1;\r\n    }\r\n\r\n    // Save the updated teams to AsyncStorage\r\n    await AsyncStorage.setItem(\"teams\", JSON.stringify(teams));\r\n\r\n    //console.log('Match count saved: ' + await loadMatchCount(TeamNumber));\r\n  } else {\r\n    console.log(\"Team not found\");\r\n  }\r\n};\r\n\r\nexport async function loadMatchCount(teamNumber) {\r\n  try {\r\n    // Retrieve data from AsyncStorage\r\n    const team = await loadTeamData(teamNumber);\r\n    if (team.matchNumber == null) {\r\n      return 0;\r\n    }\r\n    return team.matchNumber;\r\n  } catch (error) {\r\n    console.error(\"Error retrieving data from AsyncStorage:\", error);\r\n    return null; // or handle accordingly based on your app's error handling\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}