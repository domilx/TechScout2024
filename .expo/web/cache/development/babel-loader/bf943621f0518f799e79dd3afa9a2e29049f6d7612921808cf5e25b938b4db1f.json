{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nexport function validateEmptyField(_x, _x2) {\n  return _validateEmptyField.apply(this, arguments);\n}\nfunction _validateEmptyField() {\n  _validateEmptyField = _asyncToGenerator(function* (fieldName, fieldValue) {\n    try {\n      if (fieldValue === undefined || fieldValue === null || fieldValue === '') {\n        return {\n          isValid: false,\n          errorMessage: `${fieldName} cannot be empty`\n        };\n      } else if (typeof fieldValue === 'number' && fieldValue === 0) {\n        return {\n          isValid: false,\n          errorMessage: `${fieldName} cannot be 0`\n        };\n      }\n      return {\n        isValid: true\n      };\n    } catch (validationError) {\n      console.error(validationError);\n      return {\n        isValid: false,\n        errorMessage: 'Validation error occurred'\n      };\n    }\n  });\n  return _validateEmptyField.apply(this, arguments);\n}\nexport function validateNewTeam(_x3, _x4) {\n  return _validateNewTeam.apply(this, arguments);\n}\nfunction _validateNewTeam() {\n  _validateNewTeam = _asyncToGenerator(function* (teamNumber, teamList) {\n    try {\n      if (!teamNumber || teamNumber.trim() === '') {\n        throw new Error('Team Number cannot be empty');\n      }\n      for (var team of teamList) {\n        if (team.teamNumber == teamNumber) {\n          throw new Error('Team Number already exists');\n        }\n      }\n      return false;\n    } catch (validationError) {\n      Alert.alert('Error Saving Team', validationError.message);\n      return true;\n    }\n  });\n  return _validateNewTeam.apply(this, arguments);\n}","map":{"version":3,"names":["validateEmptyField","_x","_x2","_validateEmptyField","apply","arguments","_asyncToGenerator","fieldName","fieldValue","undefined","isValid","errorMessage","validationError","console","error","validateNewTeam","_x3","_x4","_validateNewTeam","teamNumber","teamList","trim","Error","team","Alert","alert","message"],"sources":["C:/Users/Noril/Documents/TechScout/logic/ValidationLogic.js"],"sourcesContent":["import { Alert } from \"react-native\";\r\n\r\n\r\n// validate given fields\r\n// validate if the given value is empty or not, will return a bool and an error message\r\nexport async function validateEmptyField(fieldName, fieldValue) {\r\n  try {\r\n    // will check any type of input --> if the value is null, or of value 0\r\n    if (fieldValue === undefined || fieldValue === null || fieldValue === '') {\r\n      return { isValid: false, errorMessage: `${fieldName} cannot be empty` };\r\n    // for number types\r\n    } else if (typeof fieldValue === 'number' && fieldValue === 0) {\r\n      return { isValid: false, errorMessage: `${fieldName} cannot be 0` };\r\n    }\r\n    return { isValid: true }; // validation passed\r\n  } catch (validationError) {\r\n    console.error(validationError);\r\n    return { isValid: false, errorMessage: 'Validation error occurred' };\r\n  }\r\n}\r\n\r\n\r\nexport async function validateNewTeam(teamNumber, teamList) {\r\n  try {\r\n    if (!teamNumber || teamNumber.trim() === '') {\r\n      throw new Error('Team Number cannot be empty');\r\n    }\r\n   \r\n    for (const team of teamList) {\r\n      if (team.teamNumber == teamNumber) {\r\n        throw new Error('Team Number already exists');\r\n       \r\n      }\r\n    }\r\n\r\n    return false; // Validation passed\r\n  } catch (validationError) {\r\n    Alert.alert('Error Saving Team', validationError.message);\r\n    return true; // Validation failed\r\n  }\r\n}"],"mappings":";;AAKA,gBAAsBA,kBAAkBA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAcvC,SAAAF,oBAAA;EAAAA,mBAAA,GAAAG,iBAAA,CAdM,WAAkCC,SAAS,EAAEC,UAAU,EAAE;IAC9D,IAAI;MAEF,IAAIA,UAAU,KAAKC,SAAS,IAAID,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,EAAE,EAAE;QACxE,OAAO;UAAEE,OAAO,EAAE,KAAK;UAAEC,YAAY,EAAG,GAAEJ,SAAU;QAAkB,CAAC;MAEzE,CAAC,MAAM,IAAI,OAAOC,UAAU,KAAK,QAAQ,IAAIA,UAAU,KAAK,CAAC,EAAE;QAC7D,OAAO;UAAEE,OAAO,EAAE,KAAK;UAAEC,YAAY,EAAG,GAAEJ,SAAU;QAAc,CAAC;MACrE;MACA,OAAO;QAAEG,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOE,eAAe,EAAE;MACxBC,OAAO,CAACC,KAAK,CAACF,eAAe,CAAC;MAC9B,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEC,YAAY,EAAE;MAA4B,CAAC;IACtE;EACF,CAAC;EAAA,OAAAR,mBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAGD,gBAAsBU,eAAeA,CAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,gBAAA,CAAAd,KAAA,OAAAC,SAAA;AAAA;AAkBpC,SAAAa,iBAAA;EAAAA,gBAAA,GAAAZ,iBAAA,CAlBM,WAA+Ba,UAAU,EAAEC,QAAQ,EAAE;IAC1D,IAAI;MACF,IAAI,CAACD,UAAU,IAAIA,UAAU,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAC3C,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,KAAK,IAAMC,IAAI,IAAIH,QAAQ,EAAE;QAC3B,IAAIG,IAAI,CAACJ,UAAU,IAAIA,UAAU,EAAE;UACjC,MAAM,IAAIG,KAAK,CAAC,4BAA4B,CAAC;QAE/C;MACF;MAEA,OAAO,KAAK;IACd,CAAC,CAAC,OAAOV,eAAe,EAAE;MACxBY,KAAK,CAACC,KAAK,CAAC,mBAAmB,EAAEb,eAAe,CAACc,OAAO,CAAC;MACzD,OAAO,IAAI;IACb;EACF,CAAC;EAAA,OAAAR,gBAAA,CAAAd,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}