{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { loadTeams, saveMatchCount } from \"./TeamLogic\";\nimport { initialMatchData } from \"../Models/MatchModel\";\nexport var SaveMatchData = function () {\n  var _ref = _asyncToGenerator(function* (newMatchData, TeamNumber, matchCount) {\n    try {\n      var teamsJson = yield AsyncStorage.getItem(\"teams\");\n      var teams = teamsJson ? JSON.parse(teamsJson) : [];\n      var targetTeamIndex = teams.findIndex(function (team) {\n        return team.teamNumber == TeamNumber || team.teamNumber.toString() == TeamNumber;\n      });\n      var matchDataKey = `MatchData${matchCount}`;\n      return new Promise(function (resolve, reject) {\n        if (targetTeamIndex !== -1) {\n          Alert.alert(\"Save Match\", \"Once saved, the data for this match cannot be changed. Are you sure you want to save?\", [{\n            text: \"Cancel\",\n            style: \"cancel\",\n            onPress: function onPress() {\n              return resolve(false);\n            }\n          }, {\n            text: \"Save\",\n            onPress: function () {\n              var _onPress = _asyncToGenerator(function* () {\n                teams[targetTeamIndex][matchDataKey] = newMatchData;\n                yield AsyncStorage.setItem(\"teams\", JSON.stringify(teams));\n                yield saveMatchCount(TeamNumber, matchCount);\n                alert(\"Saved!\");\n                resolve(true);\n              });\n              function onPress() {\n                return _onPress.apply(this, arguments);\n              }\n              return onPress;\n            }()\n          }], {\n            cancelable: false\n          });\n        } else {\n          alert(\"Data saved to AsyncStorage\");\n          resolve(true);\n        }\n      });\n    } catch (error) {\n      console.error(\"Error saving pit data:\", error);\n      throw error;\n    }\n  });\n  return function SaveMatchData(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loadMatchData = function () {\n  var _ref2 = _asyncToGenerator(function* (currentTeamNumber, MatchNumber) {\n    try {\n      var teams = yield loadTeams();\n      var targetTeam = teams.find(function (team) {\n        return team.teamNumber == currentTeamNumber || team.teamNumber.toString() == currentTeamNumber;\n      });\n      if (targetTeam) {\n        var matchDataKey = `MatchData${MatchNumber}`;\n        return targetTeam[matchDataKey] || initialMatchData;\n      } else {\n        return initialMatchData;\n      }\n    } catch (error) {\n      console.error(\"Error loading match data:\", error);\n      return initialMatchData;\n    }\n  });\n  return function loadMatchData(_x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var saveMatchScanned = function () {\n  var _ref3 = _asyncToGenerator(function* (TeamNumber, MatchNumber) {\n    try {\n      var teamsJson = yield AsyncStorage.getItem(\"teams\");\n      var teams = teamsJson ? JSON.parse(teamsJson) : [];\n      var matchDataKey = `MatchData${MatchNumber}`;\n      var targetTeamIndex = teams.findIndex(function (team) {\n        return team.teamNumber == TeamNumber || team.teamNumber.toString() == TeamNumber;\n      });\n      if (targetTeamIndex !== -1) {\n        teams[targetTeamIndex][matchDataKey].gotScanned = true;\n        yield AsyncStorage.setItem(\"teams\", JSON.stringify(teams));\n      } else {\n        console.log(\"Team not found\");\n      }\n    } catch (error) {\n      console.error(\"Error saving match scanned status:\", error);\n    }\n  });\n  return function saveMatchScanned(_x6, _x7) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var isMatchScanned = function () {\n  var _ref4 = _asyncToGenerator(function* (teamNumber, matchNumber) {\n    try {\n      var teamsJson = yield AsyncStorage.getItem(\"teams\");\n      var teams = teamsJson ? JSON.parse(teamsJson) : [];\n      var matchDataKey = `MatchData${matchNumber}`;\n      var targetTeam = teams.find(function (team) {\n        return team.teamNumber == teamNumber || team.teamNumber.toString() == teamNumber;\n      });\n      if (targetTeam) {\n        var _targetTeam$matchData;\n        return !!((_targetTeam$matchData = targetTeam[matchDataKey]) != null && _targetTeam$matchData.gotScanned);\n      } else {\n        console.log(\"Team not found\");\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Error checking if match is scanned:\", error);\n      return false;\n    }\n  });\n  return function isMatchScanned(_x8, _x9) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["AsyncStorage","Alert","loadTeams","saveMatchCount","initialMatchData","SaveMatchData","_ref","_asyncToGenerator","newMatchData","TeamNumber","matchCount","teamsJson","getItem","teams","JSON","parse","targetTeamIndex","findIndex","team","teamNumber","toString","matchDataKey","Promise","resolve","reject","alert","text","style","onPress","_onPress","setItem","stringify","apply","arguments","cancelable","error","console","_x","_x2","_x3","loadMatchData","_ref2","currentTeamNumber","MatchNumber","targetTeam","find","_x4","_x5","saveMatchScanned","_ref3","gotScanned","log","_x6","_x7","isMatchScanned","_ref4","matchNumber","_targetTeam$matchData","_x8","_x9"],"sources":["C:/Users/Noril/Documents/TechScout/logic/MatchLogic.js"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { Alert } from \"react-native\";\r\nimport { loadTeams, saveMatchCount } from \"./TeamLogic\";\r\nimport { initialMatchData } from \"../Models/MatchModel\";\r\n\r\nexport const SaveMatchData = async (newMatchData, TeamNumber, matchCount) => {\r\n  try {\r\n    const teamsJson = await AsyncStorage.getItem(\"teams\");\r\n    const teams = teamsJson ? JSON.parse(teamsJson) : [];\r\n\r\n    const targetTeamIndex = teams.findIndex(\r\n      (team) =>\r\n        team.teamNumber == TeamNumber ||\r\n        team.teamNumber.toString() == TeamNumber\r\n    );\r\n\r\n    const matchDataKey = `MatchData${matchCount}`;\r\n    return new Promise((resolve, reject) => {\r\n      if (targetTeamIndex !== -1) {\r\n        Alert.alert(\r\n          \"Save Match\",\r\n          \"Once saved, the data for this match cannot be changed. Are you sure you want to save?\",\r\n          [\r\n            {\r\n              text: \"Cancel\",\r\n              style: \"cancel\",\r\n              onPress: () => resolve(false),\r\n            },\r\n            {\r\n              text: \"Save\",\r\n              onPress: async () => {\r\n                teams[targetTeamIndex][matchDataKey] = newMatchData;\r\n\r\n                await AsyncStorage.setItem(\"teams\", JSON.stringify(teams));\r\n                await saveMatchCount(TeamNumber, matchCount);\r\n\r\n                alert(\"Saved!\");\r\n\r\n                resolve(true);\r\n              },\r\n            },\r\n          ],\r\n          { cancelable: false }\r\n        );\r\n      } else {\r\n\r\n        alert(\"Data saved to AsyncStorage\");\r\n\r\n        resolve(true);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error saving pit data:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const loadMatchData = async (currentTeamNumber, MatchNumber) => {\r\n  try {\r\n    const teams = await loadTeams();\r\n\r\n    const targetTeam = teams.find(\r\n      (team) =>\r\n        team.teamNumber == currentTeamNumber ||\r\n        team.teamNumber.toString() == currentTeamNumber\r\n    );\r\n\r\n    if (targetTeam) {\r\n      const matchDataKey = `MatchData${MatchNumber}`;\r\n\r\n      return targetTeam[matchDataKey] || initialMatchData;\r\n    } else {\r\n      return initialMatchData;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error loading match data:\", error);\r\n\r\n    return initialMatchData;\r\n  }\r\n};\r\n\r\nexport const saveMatchScanned = async (TeamNumber, MatchNumber) => {\r\n  try {\r\n    const teamsJson = await AsyncStorage.getItem(\"teams\");\r\n    const teams = teamsJson ? JSON.parse(teamsJson) : [];\r\n    const matchDataKey = `MatchData${MatchNumber}`;\r\n    const targetTeamIndex = teams.findIndex(\r\n      (team) =>\r\n        team.teamNumber == TeamNumber || team.teamNumber.toString() == TeamNumber\r\n    );\r\n\r\n    if (targetTeamIndex !== -1) {\r\n      teams[targetTeamIndex][matchDataKey].gotScanned = true;\r\n      await AsyncStorage.setItem(\"teams\", JSON.stringify(teams));\r\n    } else {\r\n      console.log(\"Team not found\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error saving match scanned status:\", error);\r\n  }\r\n};\r\n\r\nexport const isMatchScanned = async (teamNumber, matchNumber) => {\r\n  try {\r\n    const teamsJson = await AsyncStorage.getItem(\"teams\");\r\n    const teams = teamsJson ? JSON.parse(teamsJson) : [];\r\n    const matchDataKey = `MatchData${matchNumber}`;\r\n\r\n    const targetTeam = teams.find(\r\n      (team) =>\r\n        team.teamNumber == teamNumber || team.teamNumber.toString() == teamNumber\r\n    );\r\n\r\n    if (targetTeam) {\r\n      return !!targetTeam[matchDataKey]?.gotScanned;\r\n    } else {\r\n      console.log(\"Team not found\");\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error checking if match is scanned:\", error);\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}